"use client";

import { useEffect, useState } from 'react';
import { Noto_Sans_JP } from "next/font/google";
import { PrimeReactProvider } from "primereact/api";
import { PersistGate } from "redux-persist/integration/react";
import Stripe from 'stripe';

import { LayoutProvider } from "@/layout/context/layoutcontext";
import { persistor } from "@/redux/store";
import { Providers } from "@/redux/provider";
import StripeProvider from '@/components/stripe';

/**
 * Import global CSS for entire application
 */
import "primereact/resources/primereact.css";
import "primeflex/primeflex.css";
import "primeicons/primeicons.css";
import "primeflex/primeflex.css";
import "./globals.css";
import "@/styles/layout/layout.scss";
import "@/styles/components/components.scss";
import "@/styles/pages/pages.scss";

const inter = Noto_Sans_JP({ subsets: ["latin"] });

const metadata = {
  title: "Posuru",
  description: "Generated by BE Messenger",
};

const stripe = new Stripe('sk_test_51N8SSZSEAoqrKaZBCVaos5UGgpcGjuAg4Wbc0fPBAtnbUb6TffKUKTbKM2s5Rj657wmBAlin8RbtA377gVITdIsU009zyxFoax');

export default function RootLayout({ children }) {
  const [clientSecret, setClientSecret] = useState('');

  useEffect(() => {
    const fetchPaymentIntent = async () => {
      try {
        const paymentIntent = await stripe.paymentIntents.create({
          amount: 2000, // Amount in cents
          currency: 'usd',
          automatic_payment_methods: {
            enabled: true,
          },
          description: 'Description of the export transaction',
          shipping: {
            name: 'Customer Name', // Replace with actual customer name
            address: {
              line1: '123 Main Street', // Replace with actual address
              city: 'Mumbai',
              state: 'MH',
              country: 'IN',
              postal_code: '400001',
            },
          },
        });
        setClientSecret(paymentIntent.client_secret);
      } catch (error) {
        console.log(error);
      }
    };

    fetchPaymentIntent();  
  }, []);

  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <title>{metadata.title}</title>
        <meta name="description" content={metadata.description} />
        <link rel="icon" href="/layout/images/Group 316.png" />
        <link
          id="theme-css"
          href={`/themes/default/theme.css`}
          rel="stylesheet"
        ></link>
      </head>
      <body className={inter.className}>
        <PrimeReactProvider>
          <Providers>
            <PersistGate loading={null} persistor={persistor}>
              <LayoutProvider>
                <StripeProvider clientSecret={clientSecret}>
                  {children}
                </StripeProvider>
              </LayoutProvider>
            </PersistGate>
          </Providers>
        </PrimeReactProvider>
      </body>
    </html>
  );
}
